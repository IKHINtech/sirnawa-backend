basePath: /
definitions:
  dto.RegisterInput:
    properties:
      email:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  request.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  utils.ErrorDetails:
    properties:
      code:
        type: string
      message:
        items:
          type: string
        type: array
    type: object
  utils.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/utils.ErrorDetails'
      status:
        type: string
    type: object
  utils.Pagination:
    properties:
      limit:
        type: integer
      page:
        type: integer
      sort:
        type: string
      sort_by:
        type: string
      total_pages:
        type: integer
      total_rows:
        type: integer
    type: object
  utils.ResponseData:
    properties:
      data: {}
      message:
        type: string
      meta:
        $ref: '#/definitions/utils.Pagination'
      status:
        type: string
    type: object
host: localhost:5001
info:
  contact:
    email: sarikhin@yahoo.co.id
    name: API Support
  description: This is a API Server for SIRNAWA
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SIRNAWA API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/request.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
      summary: Login
      tags:
      - Auth
  /auth/logout:
    delete:
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Logout
      tags:
      - Auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Get User
      tags:
      - Auth
  /auth/refresh-token:
    get:
      consumes:
      - application/json
      description: Refresh Token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Refresh Token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register
      tags:
      - Auth
  /block:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - Bearer: []
      summary: Get List Block
      tags:
      - Block
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - Bearer: []
      summary: Create Block
      tags:
      - Block
  /block/{id}:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - Bearer: []
      summary: Delete Block By ID
      tags:
      - Block
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - Bearer: []
      summary: Find Block By ID
      tags:
      - Block
    put:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - Bearer: []
      summary: Update Block
      tags:
      - Block
  /block/paginated:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - Bearer: []
      summary: Get Paginated Block
      tags:
      - Block
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
